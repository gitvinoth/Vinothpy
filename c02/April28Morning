
PT_BASELINE_TEMPLATE = "(SELECT $timestamp, asset_id, $parameter AS baseline_value FROM `$catalog`.silver_zone.$table_name WHERE asset_id = '$asset_id' AND $timestamp = $baseline_timestamp) baseline_values "

PT_CURRENT_TEMPLATE = "(SELECT $timestamp, asset_id, $parameter AS current_value FROM `$catalog`.silver_zone.$table_name WHERE asset_id = '$asset_id' AND $timestamp BETWEEN $start_time AND $end_time) current_values"

PT_DIFFERENTIAL_TEMPLATE = "(SELECT d.$timestamp,ABS((d.current_value - b.baseline_value) / b.baseline_value) * 100 AS value_difference FROM current_values d JOIN baseline_values b ON d.asset_id = b.asset_id) differential"


def generate_differential_query(
   table_name: str,
   baseline_template: str,
   current_template: str,
   differential_template: str,
   parameter: str,
   timestamp_column: str,
   asset_id_list: list[str],
   operator: str,
   threshold: float,
   join_condition: str,
   baseline_timestamp: int,
   duration: int,
   threshold_unit: str = "%"
) -> str:
   """
   Generates a clean formatted differential sliding window query
   with proper CTE naming and no unnecessary newlines inside WITH CTEs.
   """
   try:
       cte_blocks = []
       anomaly_blocks = []
       for asset_id in asset_id_list:
           safe_suffix = asset_id.lower().replace("-", "_")
           # Build baseline CTE
           baseline_cte = baseline_template \
               .replace("$parameter", parameter) \
               .replace("$timestamp", timestamp_column) \
               .replace("$asset_id", asset_id) \
               .replace("$baseline_timestamp", str(baseline_timestamp)) \
               .replace("$table_name", table_name) \
               .replace("baseline_values", f"baseline_{safe_suffix}")
           # Build current CTE
           current_cte = current_template \
               .replace("$parameter", parameter) \
               .replace("$timestamp", timestamp_column) \
               .replace("$asset_id", asset_id) \
               .replace("$table_name", table_name) \
               .replace("current_values", f"current_{safe_suffix}")
           # Build differential formula
           if threshold_unit == "%":
               diff_formula = "ABS((d.current_value - b.baseline_value) / b.baseline_value) * 100"
           else:
               diff_formula = "(d.current_value - b.baseline_value)"
           # Build differential CTE
           diff_cte = differential_template \
               .replace("$timestamp", timestamp_column) \
               .replace("$diff_formula", diff_formula) \
               .replace("current_values", f"current_{safe_suffix}") \
               .replace("baseline_values", f"baseline_{safe_suffix}") \
               .replace("differential", f"differential_{safe_suffix}")
           # Add all CTE blocks
           cte_blocks.extend([baseline_cte, current_cte, diff_cte])
           # Build anomaly select block
           anomaly_block = f"SELECT d.{timestamp_column} AS start_time, d.{timestamp_column} + ({duration} - 1) AS end_time FROM differential_{safe_suffix} d WHERE d.value_difference {operator} {threshold}"
           anomaly_blocks.append(anomaly_block.strip())
       # WITH CTE block: join with ", " (comma + single space)
       with_clause = "WITH " + ", ".join(cte_blocks)
       # Final anomalies CTE
       if join_condition.lower() == "and":
           final_join = anomaly_blocks[0]
           for idx in range(1, len(anomaly_blocks)):
               final_join = f"SELECT t1.start_time, t1.end_time FROM ({final_join}) t1 INNER JOIN ({anomaly_blocks[idx]}) t{idx+1} ON t1.start_time <= t{idx+1}.end_time AND t{idx+1}.start_time <= t1.end_time"
       elif join_condition.lower() == "or":
           final_join = " UNION ALL ".join(anomaly_blocks)
       else:
           raise ValueError(f"Unsupported join_condition: {join_condition}")
       # Full final query
       full_query = f"{with_clause}, final_anomalies AS ({final_join}) SELECT DISTINCT start_time, end_time FROM final_anomalies"
       return full_query.strip()
   except Exception as e:
       return f"-- Error generating differential query: {str(e)}"



generate_differential_query(
   table_name="pt_gauge",
   baseline_template=PT_BASELINE_TEMPLATE,
   current_template=PT_CURRENT_TEMPLATE,
   differential_template=PT_DIFFERENTIAL_TEMPLATE,
   parameter="pressure",
   timestamp_column="epoch_timestamp",
   asset_id_list=["PTG_001","PTG_002"],
   operator=">",
   threshold=50.0,
   join_condition="and",
   baseline_timestamp=1714008000,
   duration = 10
)

"WITH (SELECT epoch_timestamp, asset_id, pressure AS baseline_value FROM `$catalog`.silver_zone.pt_gauge WHERE asset_id = 'PTG_001' AND epoch_timestamp = 1714008000) baseline_ptg_001 , (SELECT epoch_timestamp, asset_id, pressure AS current_value FROM `$catalog`.silver_zone.pt_gauge WHERE asset_id = 'PTG_001' AND epoch_timestamp BETWEEN $start_time AND $end_time) current_ptg_001, (SELECT d.epoch_timestamp,ABS((d.current_value - b.baseline_value) / b.baseline_value) * 100 AS value_difference FROM current_ptg_001 d JOIN baseline_ptg_001 b ON d.asset_id = b.asset_id) differential_ptg_001, (SELECT epoch_timestamp, asset_id, pressure AS baseline_value FROM `$catalog`.silver_zone.pt_gauge WHERE asset_id = 'PTG_002' AND epoch_timestamp = 1714008000) baseline_ptg_002 , (SELECT epoch_timestamp, asset_id, pressure AS current_value FROM `$catalog`.silver_zone.pt_gauge WHERE asset_id = 'PTG_002' AND epoch_timestamp BETWEEN $start_time AND $end_time) current_ptg_002, (SELECT d.epoch_timestamp,ABS((d.current_value - b.baseline_value) / b.baseline_value) * 100 AS value_difference FROM current_ptg_002 d JOIN baseline_ptg_002 b ON d.asset_id = b.asset_id) differential_ptg_002, final_anomalies AS (SELECT t1.start_time, t1.end_time FROM (SELECT d.epoch_timestamp AS start_time, d.epoch_timestamp + (10 - 1) AS end_time FROM differential_ptg_001 d WHERE d.value_difference > 50.0) t1 INNER JOIN (SELECT d.epoch_timestamp AS start_time, d.epoch_timestamp + (10 - 1) AS end_time FROM differential_ptg_002 d WHERE d.value_difference > 50.0) t2 ON t1.start_time <= t2.end_time AND t2.start_time <= t1.end_time) SELECT DISTINCT start_time, end_time FROM final_anomalies"

